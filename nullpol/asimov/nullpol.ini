{%- if production.event.repository -%}
{%- assign repo_dir = production.event.repository.directory -%}
{%- else -%}
{%- assign repo_dir = "." -%}
{%- endif -%}
{%- if production.meta['likelihood'] contains "calibration" -%}
{%- assign calibration_on = production.meta['likelihood']['calibration']['sample'] -%}
{%- else -%}
{%- assign calibration_on = True %}
{%- endif -%}
{%- assign meta = production.meta -%}
{%- assign sampler = production.meta['sampler'] -%}
{%- assign scheduler = production.meta['scheduler'] -%}
{%- assign likelihood = production.meta['likelihood'] -%}
{%- assign priors = production.meta['priors'] -%}
{%- assign data = production.meta['data'] -%}
{%- assign quality = production.meta['quality'] -%}
{%- assign ifos = production.meta['interferometers'] -%}

{%- if data contains "calibration" %}
{%- if calibration_on %}
{%- if data['calibration'] contains ifos[0] %}
################################################################################
## Calibration arguments
################################################################################
calibration-model=CubicSpline
spline-calibration-envelope-dict={ {% for ifo in ifos %}{{ifo}}:{{data['calibration'][ifo]}},{% endfor %} }
spline-calibration-nodes=10
spline-calibration-amplitude-uncertainty-dict=None
spline-calibration-phase-uncertainty-dict=None
calibration-correction-type=data
{%- if priors contains 'calibration' %}
calibration-prior-boundary={{ priors['calibration']['boundary'] | default: reflective }}
{%- endif %}
{%- endif %}
{%- endif %}
{%- endif %}

################################################################################
## Data generation arguments
################################################################################

ignore-gwpy-data-quality-check=True
gps-tuple=None
gps-file=None
timeslide-file=None
timeslide-dict=None
trigger-time={{ production.meta['event time'] }}
gaussian-noise=False
n-simulation=0
{%- if data['data files'].size > 0 %}
data-dict={ {% for ifo in ifos %}{{ifo}}:{{data['data files'][ifo]}},{% endfor %} }
{%- else %}
data-dict=None
{%- endif %}
data-format={{ data['format'] | default: "gwf" }}
channel-dict={ {% for ifo in ifos %}{{data['channels'][ifo]}},{% endfor %} }
{%- if data contains 'frame types' %}
frame-type-dict={ {% for ifo in ifos %}{{ifo}}:{{data['frame types'][ifo]}},{% endfor %} }
{%- endif %}

################################################################################
## Detector arguments
################################################################################

detectors={{ ifos }}
duration={{ data['segment length'] }}
generation-seed=42
psd-dict={ {% for ifo in ifos %}{{ifo}}:{{production.psds[ifo]}},{% endfor %} }
psd-fractional-overlap=0.5
post-trigger-duration={{ likelihood['post trigger time'] | default: 2.0 }}
sampling-frequency={{ likelihood['sample rate'] | round }}
psd-length={{ likelihood['psd length'] | round }}
psd-maximum-duration=1024
psd-method=median
psd-start-time=None
minimum-frequency={ {% for ifo in ifos %}{{ifo}}:{{quality['minimum frequency'][ifo]}},{% endfor %}{% if likelihood contains 'start frequency'%} waveform: {{ likelihood['start frequency'] }} {% endif %} }
maximum-frequency={ {% for ifo in ifos %}{{ifo}}:{{quality['maximum frequency'][ifo]}},{% endfor %} }
zero-noise=False
tukey-roll-off={{ likelihood['roll off time'] | default: 0.4 }}
resampling-method=lal

################################################################################
## Injection arguments
################################################################################

injection=False
injection-dict=None
injection-file=None
injection-numbers=None
injection-waveform-approximant=None
injection-frequency-domain-source-model=None
injection-waveform-arguments=None

################################################################################
## Job submission arguments
################################################################################

{%- if scheduler contains "accounting group" %}
accounting={{ scheduler['accounting group'] }}
accounting_user = {{ config['condor']['user'] }}
{%- else %}
accounting=not.required.here
accounting_user = {{ config['condor']['user'] }}
{%- endif %}
label={{ production.name }}
local=False
local-generation={{ scheduler['local generation'] | default: False }}
local-plot=False
outdir={{ production.rundir }}
periodic-restart-time={{ scheduler['periodic restart time'] | default: 28800 }}
request-memory={{ scheduler['request memory'] | default: 4.0}}
request-memory-generation={{ scheduler['request generation memory'] | default: None }}
request-cpus={{ scheduler['request cpus'] | default: 1 }}
request-disk={{ scheduler['request disk'] | default: 1 }}
scheduler={{ scheduler['type'] | default: "condor" }}
scheduler-args=None
scheduler-module=None
scheduler-env=None
transfer-files={% if scheduler['osg'] %}True{% else %}{{ scheduler['transfer files'] | default: True }}{% endif %}
log-directory=None
getenv=[GWDATAFIND_SERVER]
online-pe=False
osg={{ scheduler['osg'] | default: False }}
desired-sites={{ scheduler['desired sites'] | default: None }}
analysis-executable={{ config['pipelines']['environment'] }}/bin/nullpol_pipe_analysis
environment-variables={{ scheduler['environment variables'] | default: "{'HDF5_USE_FILE_LOCKING': False, 'OMP_NUM_THREADS'=1, 'OMP_PROC_BIND'=False}" }}

################################################################################
## Likelihood arguments
################################################################################

calibration-marginalization=False
reference-frame={{ likelihood['reference frame'] | default: "sky" }}
time-reference={{ likelihood['time reference'] | default: "geocent" }}
calibration-lookup-table=None
number-of-response-curves=1000
extra-likelihood-kwargs={{ likelihood['kwargs'] | default: "None" }}
likelihood-type={{ likelihood['type'] | default: "FractionalProjectionTimeFrequencyLikelihood" }}
calibration-psd-lookup-table=None
polarization-modes={{ likelihood['polarization modes'] | default: '[pc, b, xy, pcb, pcxy, xyb, pcbxy, pc, xy, pcb, pcxy, xyb, pcbxy]' }}
polarization-basis={{ likelihood['polarization basis'] | default: '[p, b, x, p, p, x, p, pc, xy, pb, px, xb, pb]' }}
wavelet-frequency-resolution={{ likelihood['wavelet frequency resolution'] | default: 16.0 }}
wavelet-nx={{ likelihood['wavelet nx'] | default: 4.0 }}
simulate-psd-nsample={{ likelihood['simulate psd nsample'] | default: 1000 }}

################################################################################
## Output arguments
################################################################################

plot-trace=False
plot-data=False
plot-injection=False
plot-spectrogram=False
plot-calibration=False
plot-corner=False
plot-marginal=False
plot-skymap=True
plot-waveform=False
plot-format=png
create-summary=False
email=None
notification=Error
queue=None
existing-dir=None
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}
summarypages-arguments=None
result-format=hdf5
final-result=True
final-result-nsamples=20000

################################################################################
## Prior arguments
################################################################################

deltaT=0.2
prior-file=None
{% if production.meta contains "priors" %}
prior-dict={
{%- if priors.keys() contains "geocentric time" %}
{%- assign p = priors['geocentric time'] %}
    geocent_time = {{p['type']}}(name="geocent_time", minimum={{p['minimum']}}, maximum={{p['maximum']}}, boundary={{p['boundary'] | default: None}}),
{% endif %}
{%- if priors.keys() contains "ra" %}
    ra = priors['ra']['peak'],
{% endif %}
{%- if priors.keys() contains "dec" %}
    dec = priors['dec']['peak'],
{% endif %}
}
{% endif %}
prior-dict=None
enforce-signal-duration={{ production.meta['waveform']['enforce signal duration'] | default: False }}
default-prior={{ priors['default'] | default: "PolarizationPriorDict" }}

################################################################################
## Post processing arguments
################################################################################

postprocessing-executable=None
postprocessing-arguments=None
single-postprocessing-executable=None
single-postprocessing-arguments=None

################################################################################
## Sampler arguments
################################################################################

sampler={{sampler['sampler'] | default: "dynesty" }}
sampling-seed={{sampler['seed'] | default: 1 }}
n-parallel={{ sampler['parallel jobs'] | default: 2 }}
sampler-kwargs={{ sampler['sampler kwargs'] |  default: "{'nlive': 1000, 'naccept': 60, 'check_point_plot': True, 'check_point_delta_t': 1800, 'print_method': 'interval-60', 'sample': 'acceptance-walk'}"  }}

################################################################################
## Time-frequency clustering
################################################################################

time-frequency-clustering-method={{ likelihood['time frequency clustering method'] | default: None }}
time-frequency-clustering-injection-parameters-filename={{ likelihood['time frequency clustering injection parameters filename'] | default: None}}
time-frequency-clustering-pe-samples-filename={{ likelihood['time frequency clustering pe samples filename'] | default: None}}
time-frequency-clustering-threshold={{ likelihood['time frequency clustering threshold'] | default: 0.95 }}
time-frequency-clustering-threshold-type={{ likelihood['time frequency clustering threshold type'] | default: confidence }}
time-frequency-clustering-time-padding={{ likelihood['time frequency clustering time padding'] | default: 0.1 }}
time-frequency-clustering-frequency-padding={{ likelihood['time frequency clustering frequency padding'] | default: 1.0 }}
time-frequency-clustering-skypoints={{ likelihood['time frequency clustering skypoints'] | default: 100 }}