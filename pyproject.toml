[build-system]
requires = ["flit_core >=2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "nullpol"
description = "A package to perform model-independent polarization test of gravitational-wave signals."
authors = [
    { name = "Isaac C.F. Wong", email = "chunfung.wong@kuleuven.be" },
    { name = "Thomas Ng", email = "thomas.ng@nikhef.nl" },
    { name = "BalÃ¡zs Cirok" },
]
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.10,<3.12"
dynamic = ["version"]
dependencies = [
    "matplotlib",
    "numpy",
    "bilby",
    "bilby_pipe<=1.6.0",
    "gwpy",
    "numba>=0.56",
    "rocket-fft",
    "scipy",
    "ConfigArgParse",
    "pycbc",
    "healpy",
    "h5py",
    "pandas",
]

[project.optional-dependencies]
asimov = ["asimov", "cbcflow"]
spark = ["pyspark>=3.0.0"]
test = [
    "black==25.9.0",
    "check-manifest==0.50",
    "pytest==8.4.2",
    "pytest-cov==7.0.0",
    "pre-commit==4.3.0",
    "pytest-mock<3.15.2",
    "pytest-github-actions-annotate-failures",
    "ruff==0.13.1",
]

[project.urls]
Documentation = "https://git.ligo.org/bayesian-null-stream/nullpol/docs"
Source = "https://git.ligo.org/bayesian-null-stream/nullpol"
Tracker = "https://git.ligo.org/bayesian-null-stream/nullpol/-/issues"

[tool.flit.module]
name = "nullpol"

[tool.black]
line-length = 120
fast = true

[tool.ruff]
exclude = ["docs"]
line-length = 120

[tool.flake8]
max-line-length = 120
exclude = ["docs"]

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
# Disable specific pylint checks that are not suitable for this codebase
disable = [
    # Documentation requirements
    "missing-module-docstring",       # C0114 - Allow modules without docstrings
    "missing-class-docstring",        # C0115 - Allow classes without docstrings
    "missing-function-docstring",     # C0111 - Allow functions without docstrings

    # Variable naming and usage
    "invalid-name",                   # C0103 - Allow single-letter and short variable names

    # Code complexity limits
    "too-many-locals",                # R0914 - Allow functions with many local variables
    "too-many-arguments",             # R0913 - Allow functions with many parameters
    "too-many-branches",              # R0912 - Allow functions with many conditional branches
    "too-many-statements",            # R0915 - Allow functions with many statements
    "too-many-positional-arguments",  # R0917 - Allow functions with many positional parameters

    # Formatting and style preferences
    "line-too-long",                  # C0301 - Disable line length checking (handled by black)
    "use-dict-literal",               # R1735 - Allow dict() calls instead of requiring {} literals
    "logging-fstring-interpolation",  # W1203 - Allow f-strings in logging (more readable than % formatting)

    # Testing patterns
    "redefined-outer-name",           # W0621 - Allow pytest fixture name reuse in different scopes
    "protected-access",               # W0212 - Allow access to protected members in tests and internal APIs

    # File handling
    "unspecified-encoding",           # W1514 - Allow open() without explicit encoding for compatibility
]

# Ignore duplicate code violations in test files only
[tool.pylint.similarities]
ignore-paths = ["tests/"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 10

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"

executionEnvironments = [{ root = "src" }]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov src --cov-fail-under 0 --cov-append -m 'not integration'"
pythonpath = ["src"]
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[project.scripts]
nullpol_create_injection = "nullpol.cli.create_injection:main"
nullpol_create_time_frequency_filter_from_sample = "nullpol.cli.create_time_frequency_filter_from_sample:main"
nullpol_pipe = "nullpol.cli.main:main"
nullpol_pipe_analysis = "nullpol.cli.data_analysis:main"
nullpol_pipe_generation = "nullpol.cli.data_generation:main"
nullpol_pipe_write_default_ini = "nullpol.cli.parser:main"
nullpol_get_asimov_yaml = "nullpol.cli.get_asimov_yaml:main"

[project.entry-points.'asimov.pipelines']
nullpol = "nullpol.integrations.asimov.asimov:Nullpol"

[project.entry-points.'asimov.hooks.postmonitor']
tgrflow = 'nullpol.integrations.asimov.tgrflow:Collector'

[project.entry-points.'asimov.hooks.applicator']
tgrflow = 'nullpol.integrations.asimov.tgrflow:Applicator'
