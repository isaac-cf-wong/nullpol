before_script:
  # Install system dependencies
  - apt-get update
  - apt-get install -y libgsl-dev # Install GSL and its development headers

stages:
  - initial
  - code-quality
  - test

# ------------- Initial Stage -------------

.list-env: &list-env
  - PREFIX="$(dirname $(which python))/.."
  - if [ -d "${PREFIX}/conda-meta" ]; then
    conda list --prefix "${PREFIX}" --show-channel-urls;
    else
    python -m pip list installed;
    fi

.test-python: &test-python
  stage: initial
  image: python
  script:
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install -e .
    - *list-env
    - for script in $(pip show -f nullpol | grep "bin\/" | xargs -I {} basename {}); do
      ${script} --help;
      done

basic-3.10:
  <<: *test-python
  image: python:3.10
  only:
    - merge_requests
    - main

basic-3.11:
  <<: *test-python
  image: python:3.11
  only:
    - merge_requests
    - main

basic-3.12:
  <<: *test-python
  image: python:3.12
  only:
    - merge_requests
    - main

# ------------- Code Quality Stage -------------

.code-quality: &code-quality
  stage: code-quality
  image: python:3.12
  script:
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install .[test]
    - *list-env

init-files-check:
  <<: *code-quality
  script:
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install .[test]
    - echo "Checking that auto-generated __init__.py files are up to date..."
    - |
      # Check if any files would be updated (use quiet mode for clean output)
      DRY_RUN_OUTPUT=$(python scripts/auto_generate_init.py --dry-run --quiet)
      if [ -n "$DRY_RUN_OUTPUT" ]; then
        echo ""
        echo "ERROR: Auto-generated __init__.py files are out of date!"
        echo "Files that need updates:"
        echo "$DRY_RUN_OUTPUT"
        echo ""
        echo "Please run 'python scripts/auto_generate_init.py' locally and commit the changes."
        exit 1
      else
        echo "SUCCESS: All auto-generated __init__.py files are up to date"
      fi
  only:
    - merge_requests
    - main

black-check:
  <<: *code-quality
  script:
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install .[test]
    - python -m black --check --diff src/
  only:
    - merge_requests
    - main

ruff-check:
  <<: *code-quality
  script:
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install .[test]
    - python -m ruff check src/
  only:
    - merge_requests
    - main

# ------------- Test Stage -------------
.unit-tests: &unit-test
  stage: test
  script:
    - python -m pip install .[test]
    - *list-env
    - export COVERAGE_FILE=.coverage.$CI_JOB_NAME
    - pytest --cov-config=.coveragerc --junitxml=test-results.xml --cov=nullpol --cov-report=xml --cov-report=html
  artifacts:
    when: always
    paths:
      - .coverage.*
      - test-results.xml
      - htmlcov/
      - coverage.xml
    reports:
      junit: test-results.xml

python-3.10:
  <<: *unit-test
  needs: ["basic-3.10"]
  image: python:3.10
  only:
    - merge_requests
    - main

python-3.11:
  <<: *unit-test
  needs: ["basic-3.11"]
  image: python:3.11
  only:
    - merge_requests
    - main

python-3.12:
  <<: *unit-test
  needs: ["basic-3.12"]
  image: python:3.12
  only:
    - merge_requests
    - main

# ------------- Coverage Report Summary -------------

coverage-summary:
  stage: test
  image: python:3.12
  script:
    - echo "Merging coverage reports"
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install coverage
    # Combine multiple coverage reports if applicable
    - coverage combine
    - coverage report
    - coverage html
  artifacts:
    when: always
    paths:
      - htmlcov/
      - coverage.xml
  needs:
    - job: python-3.10
    - job: python-3.11
    - job: python-3.12
  only:
    - merge_requests
    - main
